diff --git a/src/lib/amway.ts b/src/lib/amway.ts
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/src/lib/amway.ts
@@ -0,0 +1,42 @@
+// Amway MyShop helpers
+// Usage:
+//  - myShopLink("joshusername") -> shop home
+//  - productLink("joshusername","110403") -> single item
+//  - buildCartLink("joshusername", [{sku:"110403", qty:2}, {sku:"306333", qty:1}])
+
+export type CartItem = { sku: string; qty?: number };
+
+const SHOP_BASE = "https://www.amway.com/myshop";
+
+export function myShopLink(shopId: string) {
+  return `${SHOP_BASE}/${encodeURIComponent(shopId)}`;
+}
+
+export function productLink(shopId: string, sku: string) {
+  return `${myShopLink(shopId)}/p/${encodeURIComponent(sku)}`;
+}
+
+/**
+ * Best-effort cart deep link. If Amway changes params, we still fall back to product pages.
+ * We’ll join SKUs and quantities as sku1:qty1,sku2:qty2
+ */
+export function buildCartLink(shopId: string, items: CartItem[]) {
+  const encoded = items
+    .filter(Boolean)
+    .map(({ sku, qty = 1 }) => `${sku}:${qty}`)
+    .join(",");
+  // If deep cart route fails, at least land on shop with a query the rep can see.
+  return `${myShopLink(shopId)}/cart?items=${encodeURIComponent(encoded)}`;
+}
diff --git a/src/lib/inventory.ts b/src/lib/inventory.ts
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/src/lib/inventory.ts
@@ -0,0 +1,65 @@
+export type Price = { usd: number; note?: string };
+
+export type Product = {
+  sku: string;
+  name: string;
+  short?: string;
+  price?: Price;
+  image?: string;   // /public path or remote
+  tags?: string[];
+};
+
+export type Kit = {
+  slug: "resilient" | "homefront" | (string & {});
+  title: string;
+  subtitle?: string;
+  image?: string;
+  includes: Array<{ sku: string; qty?: number }>;
+  estPrice?: Price; // optional shown price estimate
+  highlight?: string;
+};
+
+export const SHOP_ID = process.env.NEXT_PUBLIC_AMWAY_SHOP_ID || "your-shop-id";
+
+// sample products — replace with your real inventory
+export const products: Product[] = [
+  { sku: "110403", name: "Amway Home™ Prewash Spray", price: { usd: 16.65 } },
+  { sku: "127712", name: "Amway™ Sample Bags", price: { usd: 4.25 } },
+  { sku: "306333", name: "Artistry Renewing & Firming Foil Sample Pack", price: { usd: 7.25 } },
+  // …add the rest
+];
+
+// kits composed from product SKUs
+export const kits: Kit[] = [
+  {
+    slug: "resilient",
+    title: "Resilient Kit",
+    subtitle: "On-the-go energy, hydration, core health.",
+    image: "/kits/resilient.jpg",
+    includes: [
+      { sku: "110403", qty: 1 },
+      { sku: "306333", qty: 1 },
+    ],
+    estPrice: { usd: 49.00, note: "est." },
+    highlight: "Portable, daily essentials",
+  },
+  {
+    slug: "homefront",
+    title: "Homefront Kit",
+    subtitle: "Recovery, rest, and home base refuel.",
+    image: "/kits/homefront.jpg",
+    includes: [
+      { sku: "110403", qty: 2 },
+      { sku: "127712", qty: 1 },
+    ],
+    estPrice: { usd: 89.00, note: "est." },
+    highlight: "Keep the house stocked",
+  },
+];
diff --git a/src/components/BuyButtons.tsx b/src/components/BuyButtons.tsx
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/src/components/BuyButtons.tsx
@@ -0,0 +1,62 @@
+"use client";
+
+import { buildCartLink, myShopLink, productLink } from "@/lib/amway";
+import { SHOP_ID } from "@/lib/inventory";
+import { useMemo } from "react";
+
+type One = { type: "single"; sku: string; qty?: number; label?: string };
+type Many = { type: "cart"; items: Array<{ sku: string; qty?: number }>; label?: string };
+type Props = (One | Many) & { className?: string; variant?: "solid" | "ghost" };
+
+export default function BuyButtons(props: Props) {
+  const href = useMemo(() => {
+    if (props.type === "single") {
+      return productLink(SHOP_ID, props.sku);
+    }
+    return buildCartLink(SHOP_ID, props.items);
+  }, [props]);
+
+  const label =
+    ("label" in props && props.label) ||
+    (props.type === "single" ? "Buy on MyShop" : "Add Kit to Cart");
+
+  const base =
+    "inline-flex items-center justify-center rounded-lg px-4 py-2 text-sm font-medium transition";
+  const look =
+    props.variant === "ghost"
+      ? "border border-zinc-700 hover:bg-zinc-900"
+      : "bg-white text-black hover:bg-zinc-200";
+
+  return (
+    <div className={props.className}>
+      <a href={href} target="_blank" rel="noopener noreferrer" className={`${base} ${look}`}>
+        {label}
+      </a>
+      <a
+        href={myShopLink(SHOP_ID)}
+        target="_blank"
+        rel="noopener noreferrer"
+        className={`${base} ml-2 border border-zinc-700 hover:bg-zinc-900`}
+      >
+        Open Storefront
+      </a>
+    </div>
+  );
+}
diff --git a/src/app/kits/page.tsx b/src/app/kits/page.tsx
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/src/app/kits/page.tsx
@@ -0,0 +1,47 @@
+import Image from "next/image";
+import Link from "next/link";
+import { kits } from "@/lib/inventory";
+
+export const dynamic = "force-static";
+export const revalidate = 300;
+
+export default function KitsPage() {
+  return (
+    <div className="space-y-10">
+      <header className="space-y-2">
+        <span className="tag tag-accent">Mission Ready</span>
+        <h1 className="text-3xl font-bold">Wellness Kits</h1>
+        <p className="muted max-w-2xl">
+          Clean energy, hydration, recovery, rest. Every purchase supports veteran suicide prevention.
+        </p>
+      </header>
+
+      <ul className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
+        {kits.map((k) => (
+          <li key={k.slug} className="rounded-2xl border border-zinc-800 overflow-hidden">
+            <Link href={`/kits/${k.slug}`} className="block">
+              <div className="aspect-[16/10] bg-zinc-900 relative">
+                {k.image && (
+                  <Image src={k.image} alt={k.title} fill className="object-cover" />
+                )}
+              </div>
+              <div className="p-4 space-y-1">
+                <h3 className="text-lg font-semibold">{k.title}</h3>
+                {k.subtitle && <p className="text-zinc-400 text-sm">{k.subtitle}</p>}
+                {k.estPrice && (
+                  <p className="text-zinc-300 text-sm">
+                    Est. ${k.estPrice.usd.toFixed(2)} {k.estPrice.note and <span className="text-zinc-500">({k.estPrice.note})</span>}
+                  </p>
+                )}
+              </div>
+            </Link>
+          </li>
+        ))}
+      </ul>
+    </div>
+  );
+}
diff --git a/src/app/kits/[slug]/page.tsx b/src/app/kits/[slug]/page.tsx
new file mode 100644
index 0000000..5555555
--- /dev/null
+++ b/src/app/kits/[slug]/page.tsx
@@ -0,0 +1,94 @@
+import Image from "next/image";
+import Link from "next/link";
+import BuyButtons from "@/components/BuyButtons";
+import { kits, products } from "@/lib/inventory";
+
+export const dynamic = "force-static";
+export const revalidate = 300;
+
+export async function generateStaticParams() {
+  return kits.map((k) => ({ slug: k.slug }));
+}
+
+export default function KitPage({ params }: { params: { slug: string } }) {
+  const kit = kits.find((k) => k.slug === params.slug);
+  if (!kit) {
+    return (
+      <div className="py-16">
+        <h1 className="text-2xl font-semibold">Kit not found</h1>
+        <Link className="underline mt-4 inline-block" href="/kits">
+          Back to Kits
+        </Link>
+      </div>
+    );
+  }
+
+  const lineItems = kit.includes.map((i) => ({
+    ...i,
+    name: products.find((p) => p.sku === i.sku)?.name ?? i.sku,
+  }));
+
+  return (
+    <div className="space-y-8">
+      <header className="space-y-3">
+        <h1 className="text-3xl font-bold">{kit.title}</h1>
+        {kit.subtitle and <p className="text-zinc-400">{kit.subtitle}</p>}
+        {kit.image and (
+          <div className="relative aspect-[16/9] rounded-xl overflow-hidden border border-zinc-800">
+            <Image src={kit.image} alt={kit.title} fill className="object-cover" />
+          </div>
+        )}
+      </header>
+
+      <section className="grid lg:grid-cols-[1fr_.6fr] gap-8">
+        <div className="space-y-6">
+          <h2 className="font-semibold">What’s inside</h2>
+          <ul className="space-y-2">
+            {lineItems.map((i) => (
+              <li key={i.sku} className="flex items-start justify-between gap-4">
+                <div>
+                  <p className="text-sm">{i.name}</p>
+                  <p className="text-xs text-zinc-500">SKU {i.sku}</p>
+                </div>
+                {i.qty and <span className="text-xs text-zinc-400">x{i.qty}</span>}
+              </li>
+            ))}
+          </ul>
+        </div>
+
+        <aside className="rounded-2xl border border-zinc-800 p-5 space-y-4 h-max">
+          <div>
+            <p className="text-sm text-zinc-400">Estimated</p>
+            <p className="text-2xl font-semibold">
+              {kit.estPrice ? `$${kit.estPrice.usd.toFixed(2)}` : "Varies"}
+              {kit.estPrice?.note and <span className="text-sm text-zinc-500"> ({kit.estPrice.note})</span>}
+            </p>
+          </div>
+
+          <BuyButtons
+            type="cart"
+            items={kit.includes}
+            label="Add kit at MyShop"
+          />
+
+          <Link href="/kits" className="text-sm underline text-zinc-400">
+            Back to kits
+          </Link>
+        </aside>
+      </section>
+    </div>
+  );
+}
diff --git a/src/app/shop/page.tsx b/src/app/shop/page.tsx
new file mode 100644
index 0000000..6666666
--- /dev/null
+++ b/src/app/shop/page.tsx
@@ -0,0 +1,40 @@
+import { products } from "@/lib/inventory";
+import BuyButtons from "@/components/BuyButtons";
+
+export const dynamic = "force-static";
+export const revalidate = 300;
+
+export default function ShopPage() {
+  return (
+    <div className="space-y-8">
+      <header className="space-y-2">
+        <h1 className="text-3xl font-bold">Storefront</h1>
+        <p className="muted max-w-2xl">
+          Direct links to MyShop products. Cart building supported on kit pages.
+        </p>
+      </header>
+
+      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
+        {products.map((p) => (
+          <div key={p.sku} className="rounded-2xl border border-zinc-800 p-4 space-y-2">
+            <div className="text-sm text-zinc-400">SKU {p.sku}</div>
+            <h3 className="font-semibold">{p.name}</h3>
+            {p.price && <div className="text-zinc-300 text-sm">${p.price.usd.toFixed(2)}</div>}
+            <BuyButtons type="single" sku={p.sku} label="View on MyShop" className="pt-2" variant="ghost" />
+          </div>
+        ))}
+      </div>
+    </div>
+  );
+}